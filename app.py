import json
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
import random
from difflib import SequenceMatcher
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss

# Initialiser FastAPI
app = FastAPI()

# Configurer CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®le pour les requ√™tes
class Query(BaseModel):
    question: str

# Servir la page d'accueil
@app.get("/")
async def serve_home():
    return FileResponse("index.html")

# Endpoint de sant√©
@app.get("/health")
async def health_check():
    return {"status": "healthy", "message": "ANONTCHIGAN API is running"}

# ============================================
# CONFIGURATION GROQ
# ============================================
print("üîß Configuration de Groq...")
GROQ_API_KEY =  os.getenv("GROQ_API_KEY")  # Votre cl√© API Groq
USE_GROQ = False
groq_client = None

try:
    from groq import Groq
    
    if GROQ_API_KEY:
        groq_client = Groq(api_key=GROQ_API_KEY)
        
        # Test de connexion
        test_response = groq_client.chat.completions.create(
            messages=[{"role": "user", "content": "test"}],
            model="llama-3.1-8b-instant",
            max_tokens=5,
        )
        USE_GROQ = True
        print("‚úì Groq configur√© (Llama 3.1 8B Instant)")
        print("  ‚Üí Vitesse: Ultra-rapide ‚ö°")
        print("  ‚Üí Limite: 6000 req/min (gratuit)")
    else:
        print("‚ö†Ô∏è Cl√© API Groq manquante")
        print("üí° Obtenez-en une gratuitement sur : https://console.groq.com")
        
except ImportError:
    print("‚ùå Module groq manquant")
    print("üí° Installez : pip install groq")
except Exception as e:
    print(f"‚ö†Ô∏è Groq non disponible: {str(e)[:100]}")
    USE_GROQ = False

# ============================================
# CHARGEMENT DES DONN√âES
# ============================================
print("üöÄ D√©marrage d'ANONTCHIGAN...")
print("Chargement des donn√©es RAG...")
try:
    with open('cancer_sein.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
except FileNotFoundError:
    print("‚ùå Fichier cancer_sein.json non trouv√©")
    data = []

# Cr√©er la base de connaissances
questions_data = []
all_texts = []
for item in data:
    questions_data.append({
        'question_originale': item['question'],
        'question_normalisee': item['question'].lower().strip(),
        'answer': item['answer']
    })
    all_texts.append(f"Question: {item['question']}\nR√©ponse: {item['answer']}")

print(f"‚úì {len(questions_data)} questions charg√©es")

# ============================================
# INITIALISATION EMBEDDINGS + FAISS
# ============================================
print("üîç Initialisation des embeddings...")
embedding_model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
print("‚úì Mod√®le d'embeddings charg√©")

print("üìä Cr√©ation de l'index FAISS...")
embeddings = embedding_model.encode(all_texts, show_progress_bar=True)
embeddings = np.array(embeddings).astype('float32')

dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(embeddings)
print(f"‚úì Index FAISS cr√©√© ({len(embeddings)} vecteurs, dim={dimension})")

# ============================================
# FONCTIONS DE RECHERCHE
# ============================================

def similarity_score(str1, str2):
    """Calcule la similarit√© entre deux cha√Ænes (0 √† 1)"""
    return SequenceMatcher(None, str1.lower(), str2.lower()).ratio()

def search_faiss(query: str, k: int = 3):
    """Recherche dans FAISS"""
    query_embedding = embedding_model.encode([query])
    query_embedding = np.array(query_embedding).astype('float32')
    
    distances, indices = index.search(query_embedding, k)
    
    results = []
    for i, idx in enumerate(indices[0]):
        if idx < len(questions_data):
            similarity = 1 / (1 + distances[0][i])
            results.append({
                'question': questions_data[idx]['question_originale'],
                'answer': questions_data[idx]['answer'],
                'similarity': similarity,
                'distance': distances[0][i]
            })
    
    return results

def find_by_keywords(user_question_lower):
    """Trouve une r√©ponse bas√©e sur des mots-cl√©s importants"""
    keyword_patterns = {
        'identite': {
            'keywords': ['qui es tu', 'qui es-tu', 'present toi', 'qui est anontchigan'],
            'search_in_json': ["Qui es-tu ?", "Comment tu t'appelles ?"]
        },
        'nom_signification': {
            'keywords': ['signifie ton nom', 'veut dire ton nom', 'signification nom'],
            'search_in_json': ["Que signifie ton nom ?", "Pourquoi t'appelles-tu ANONTCHIGAN ?"]
        },
        'createurs': {
            'keywords': ['qui t a cree', 'cr√©√©', 'developpe par', 'qui a fait', 'cr√©ateurs'],
            'search_in_json': ["Qui t'a cr√©√© ?", "Par qui as-tu √©t√© d√©velopp√© ?"]
        },
        'club_ia': {
            'keywords': ['club ia', 'club d ia', 'ensgmm'],
            'search_in_json': ["C'est quoi le club d'IA de l'ENSGMM ?"]
        }
    }
    
    for category, info in keyword_patterns.items():
        for keyword in info['keywords']:
            if keyword in user_question_lower:
                for q in info['search_in_json']:
                    for item in questions_data:
                        if item['question_originale'] == q:
                            return item['answer'], 0.95
    return None, 0

# ============================================
# G√âN√âRATION AVEC GROQ (ULTRA-RAPIDE ‚ö°)
# ============================================

def generate_fallback_from_context(context: str) -> str:
    """G√©n√®re une r√©ponse de secours bas√©e sur le contexte (style b√©ninois 100%)"""
    try:
        lines = context.split('\n')
        answers = [line.strip() for line in lines if line.strip().startswith('R:')]
        
        if answers:
            first_answer = answers[0].replace('R:', '').strip()
            if len(first_answer) > 250:
                first_answer = first_answer[:247] + "..."
            
            intro_phrases = [
                "W√™, √©coute bien : ",
                "Bon, voil√† ce que je peux te dire oh : ",
                "Franchement hein, ",
                "√âcoute, on est ensemble : ",
                "Regarde, "
            ]
            outro_phrases = [
                " N'oublie pas de consulter un docteur hein ! Y'a rien.",
                " Va voir un professionnel sef, on ne rigole pas avec √ßa ! üíó",
                " Mais consulte un m√©decin aussi oh. On est dedans ! üáßüáØ",
                " Et va √† l'h√¥pital faire ton check-up. D√®d√® d√®d√® ! üíó"
            ]
            return f"{random.choice(intro_phrases)}{first_answer}{random.choice(outro_phrases)}"
        
        encouragement_phrases = [
            "C'est bien de te renseigner ! üíó Pense √† faire l'auto-examen chaque mois et va voir un docteur. La pr√©vention √ßa sauve des vies m√™me ! üå∏üáßüáØ",
            "Y'a rien ! üòä Fais ton auto-examen r√©guli√®rement et consulte un professionnel. On ne donne pas dos, on est ensemble ! üíóüáßüáØ",
            "Franchement, c'est bien de s'informer ! üíó Auto-examen + m√©decin = sant√© garantie sef ! On est l√† ! üå∏",
            "Tu fais bien de poser la question üî• N'oublie pas : auto-examen tous les mois et check-up annuel. D√®d√® d√®d√® ! üíóüáßüáØ"
        ]
        return random.choice(encouragement_phrases)
    except:
        return "Y'a pas de souci ! üòä Fais ton auto-examen r√©guli√®rement et va voir un docteur. On est ensemble, on ne donne pas dos ! üíóüáßüáØ"

def generate_with_groq(question: str, context: str) -> str:
    """G√©n√®re une r√©ponse avec Groq (ULTRA-RAPIDE ‚ö°)"""
    
    if not USE_GROQ or groq_client is None:
        print("‚ö†Ô∏è Groq non configur√©. Utilisation du contexte direct.")
        return generate_fallback_from_context(context)
    
    try:
        # Optimiser le contexte
        context_lines = context.split('\n')[:8]
        context_short = '\n'.join(context_lines)
        
        if len(context_short) > 1000:
            context_short = context_short[:1000] + "..."
        
        # Messages pour Groq (format Chat)
        messages = [
            {
                "role": "system",
                "content": """Tu es ANONTCHIGAN üíó, une assistante IA B√âNINOISE 100% authentique, joviale et chaleureuse, sp√©cialis√©e dans la sensibilisation au cancer du sein au B√©nin.

PERSONNALIT√â B√âNINOISE AUTHENTIQUE:
- Tu parles le vrai fran√ßais du B√©nin avec toutes les expressions locales
- Vocabulaire Fon/Yoruba: "akw√®" (salut), "atassa/atassssaaa" (√©tonnement/ce qui d√©passe l'entendement), "d√®d√® d√®d√®" (doucement doucement), "w√™" (regarde), "gb√™" (vie), "gnon" (argent)
- Expressions b√©ninoises AUTHENTIQUES: 
  * "on est ensemble" / "on est l√†" / "on est dedans"
  * "y'a rien" / "y'a pas de souci" / "√ßa ne fait rien sef"
  * "d√®d√® d√®d√®" (doucement doucement)
  * "c'est comment?" / "√ßa dit quoi?" / "on va faire comment?"
  * "tu m'as o√π l√†?" / "tu me d√©passes oh!"
  * "franchement hein" / "s√©rieusement l√†"
  * "m√™me l√†" / "sef" / "l√† m√™me"
  * "gnin gnin gnin" (bavardages inutiles)
  * "kpayo" (mensonge/arnaque)
  * "donner dos" (abandonner)
  * "mon fr√®re" / "ma s≈ìur" / "ma grande" / "tantine" / "mon gars"
- R√©f√©rences locales: Cotonou, Porto-Novo, Dantokpa, zemidjans, gari, aloko, akassa, la vie b√©ninoise
- Tu es chaleureuse comme les vraies B√©ninoises: accueillante, directe, maternelle, parfois taquine
- Ton humour est typiquement b√©ninois (on rigole ensemble, on se taquine gentiment)

STYLE DE CONVERSATION NATUREL:
- NE r√©p√®te JAMAIS "Bonjour" en d√©but de r√©ponse 
- R√©ponds DIRECTEMENT et naturellement comme au march√© ou dans la rue √† Cotonou
- Sois concise (2-4 phrases) mais vraiment chaleureuse
- Utilise UNIQUEMENT les infos du contexte fourni
- Si hors sujet: "Ahh non, gnin gnin gnin l√†, c'est pas mon domaine ! üòÑ Moi c'est cancer du sein. On fait comment?"
- Parfois utilise des m√©taphores b√©ninoises (gari, march√©, zemidjan, etc.) si pertinent

R√àGLES:
- IMPORTANT: N'utilise "mon fr√®re/mon gars" QUE si tu es CERTAIN que c'est un homme (question sur prostate, "je suis un homme", etc.)
- N'utilise "ma s≈ìur/ma grande/tantine" QUE si tu es CERTAINE que c'est une femme
- Pour les questions sur auto-examen des seins, cancer du sein, etc.: reste NEUTRE, ne d√©signe pas le genre
- Formules neutres: "√âcoute", "W√™", "Regarde", "Franchement", sans d√©signation de genre
- Utilise "atassa!" ou "atassssaaa!" pour exprimer l'√©tonnement, ce qui d√©passe l'entendement
- "Kpayo!" si quelqu'un croit de fausses infos
- Encourage naturellement, sans √™tre lourde ni donner dos
- Emojis: üíó, üå∏, üòä, üáßüáØ, ‚ú®, üî•
- Cite Cotonou, centres de sant√© b√©ninois, vie locale si √ßa colle au contexte"""
            },
            {
                "role": "user",
                "content": f"""CONTEXTE de ma base de connaissances:
{context_short}

QUESTION de l'utilisateur: {question}

IMPORTANT: Ne dis PAS "mon fr√®re" ou "ma s≈ìur" sauf si tu es CERTAIN du genre de la personne. Pour les questions sur seins/cancer du sein, reste NEUTRE.
Evite d'√™tre trop chaleureuse et d'employer des mots comme "Atassa" fin de phrase. C'est pour les d√©but et √† employer 
une seule fois en cas de grande surprise ou √©tonnement. Les mots comme w√™ doivent √™tre emply√© rarement dans les r√©ponses 
et une fois en passant.
R√©ponds DIRECTEMENT (sans dire "Bonjour", "Salut" ou formule d'intro). Sois naturelle, chaleureuse et concise:"""
            }
        ]
        
        print(f"ü§ñ G√©n√©ration avec Groq (Llama 3.1)...")
        
        # Appel √† Groq - ULTRA RAPIDE
        response = groq_client.chat.completions.create(
            model="llama-3.1-8b-instant",  # Mod√®le le plus rapide
            messages=messages,
            max_tokens=200,  # R√©duit pour forcer la concision
            temperature=0.8,  # Augment√© pour plus de cr√©ativit√©/humour
            top_p=0.9,
        )
        
        # Extraire la r√©ponse
        answer = response.choices[0].message.content.strip()
        
        # Nettoyer les formules ind√©sirables
        unwanted_starts = [
            "bonjour", "salut", "hello", "coucou", "bonsoir", "akw√®",
            "ch√®re femme", "cher ami", "ma ch√®re",
            "bonjour √† tous", "salut √† tous"
        ]
        
        for phrase in unwanted_starts:
            # Retirer si c'est au tout d√©but
            if answer.lower().startswith(phrase):
                answer = answer[len(phrase):].strip()
                # Retirer la ponctuation qui suit
                if answer and answer[0] in [',', '!', '.', ':']:
                    answer = answer[1:].strip()
                # Capitaliser la premi√®re lettre
                if answer:
                    answer = answer[0].upper() + answer[1:]
        
        # V√©rifier que la r√©ponse n'est pas vide
        if not answer or len(answer) < 10:
            print("‚ö†Ô∏è R√©ponse trop courte, utilisation du fallback")
            return generate_fallback_from_context(context)
        
        print(f"‚úì R√©ponse g√©n√©r√©e avec Groq ({len(answer)} caract√®res)")
        return answer
    
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Erreur Groq: {error_msg}")
        
        # Messages d'erreur explicites
        if "rate limit" in error_msg.lower() or "429" in error_msg:
            print("üí° Limite de taux atteinte (rare avec Groq).")
        elif "api key" in error_msg.lower() or "401" in error_msg or "403" in error_msg:
            print("üí° Probl√®me d'authentification.")
            print("   V√©rifiez votre cl√© sur https://console.groq.com")
        elif "invalid" in error_msg.lower():
            print("üí° Cl√© API invalide. Obtenez-en une sur https://console.groq.com")
        
        # Fallback sur le contexte
        return generate_fallback_from_context(context)

# ============================================
# ENDPOINT CHAT PRINCIPAL
# ============================================

@app.post("/chat")
async def chat(query: Query):
    print(f"\nüì• Question: {query.question}")
    
    # 1. SALUTATIONS
    salutations = ["bonjour", "salut", "coucou", "hello", "akwe", "yo", "bonsoir", "hi"]
    question_lower = query.question.lower().strip()
    
    if any(salut == question_lower for salut in salutations):
        responses = [
            "Akw√® ! üòä C'est ANONTCHIGAN ici üíó √áa dit quoi ? Tu veux savoir quelque chose ?",
            "Eyy ! üëã On est ensemble hein ! Tu as une question sur le cancer du sein ? üáßüáØ",
            "√áa va ou bien ? üå∏ Moi c'est ANONTCHIGAN. C'est comment, qu'est-ce qui t'am√®ne ?",
            "Akw√® akw√® ! üíó Pose ta question l√†, on va g√©rer √ßa dodo dodo üòä",
            "Eyy ma grande/mon fr√®re ! ‚ú® ANONTCHIGAN √† ton service. Y'a pas de souci, on est l√† ! üáßüáØ"
        ]
        return {
            "answer": random.choice(responses),
            "status": "success",
            "method": "salutation"
        }
    
    # 2. RECHERCHE PAR MOTS-CL√âS
    keyword_answer, keyword_score = find_by_keywords(question_lower)
    if keyword_answer and keyword_score >= 0.9:
        print(f"‚úÖ R√©ponse par mot-cl√© (score: {keyword_score:.2f})")
        return {
            "answer": keyword_answer,
            "status": "success",
            "method": "keyword_match",
            "score": float(keyword_score)
        }
    
    # 3. RECHERCHE FAISS
    print("üîç Recherche FAISS...")
    faiss_results = search_faiss(query.question, k=3)
    
    if not faiss_results:
        print("‚ö†Ô∏è Aucun r√©sultat FAISS")
        
        # V√©rifier si c'est hors sujet
        off_topic_keywords = [
            'football', 'm√©t√©o', 'politique', 'recette', 'cuisine', 
            'film', 'musique', 'jeux', 'sport', 'voyage', 'ordinateur',
            'programmation', 'code', 'app', 't√©l√©phone'
        ]
        
        if any(keyword in question_lower for keyword in off_topic_keywords):
            off_topic_responses = [
                "Ahh non, gnin gnin gnin l√†, c'est pas mon domaine ! üòÑ Moi c'est cancer du sein que je g√®re. √áa dit quoi, on parle de √ßa ? üíóüáßüáØ",
                "Eyy, tu m'as o√π franchement ? üòÖ Mon truc c'est le cancer du sein oh. On fait comment, tu veux savoir quoi ? üå∏",
                "W√™ ! L√† m√™me l√†, je ne suis pas dedans üòä Mais pour le cancer du sein, je suis l√† ! Pose ta question sef ! üíó",
                "L√† tu me d√©passes oh ! ü§£ Reviens au cancer du sein, c'est l√† je suis forte. On est ensemble ? üáßüáØ"
            ]
            return {
                "answer": random.choice(off_topic_responses),
                "status": "info",
                "method": "off_topic_redirect"
            }
        
        no_result_responses = [
            "Hmm, je n'ai pas bien compris √ßa oh ü§î Reformule d√®d√® ou pose ta question sur le cancer du sein. Y'a rien, on est l√† ! üíó",
            "W√™, l√† m√™me je ne trouve pas l'info üòÖ Essaie de reformuler ou demande autre chose sur le cancer du sein. On va g√©rer ! üå∏",
            "Franchement, √ßa l√† je ne connais pas trop ü§î Mais pose-moi sur le cancer du sein, je suis dedans ! On est ensemble ! üíóüáßüáØ"
        ]
        return {
            "answer": random.choice(no_result_responses),
            "status": "info",
            "method": "no_result"
        }
    
    best_result = faiss_results[0]
    similarity = best_result['similarity']
    
    print(f"üìä Meilleure similarit√© FAISS: {similarity:.3f}")
    print(f"   Question trouv√©e: {best_result['question']}")
    
    # 4. D√âCISION : JSON vs G√âN√âRATION
    SIMILARITY_THRESHOLD = 0.65
    
    if similarity >= SIMILARITY_THRESHOLD:
        # HAUTE SIMILARIT√â ‚Üí R√©ponse directe du JSON
        print(f"‚úÖ Haute similarit√© ({similarity:.2f}) ‚Üí R√©ponse du JSON")
        return {
            "answer": best_result['answer'],
            "status": "success",
            "method": "json_direct",
            "score": float(similarity),
            "matched_question": best_result['question']
        }
    
    else:
        # FAIBLE SIMILARIT√â ‚Üí G√©n√©ration avec Groq
        print(f"ü§ñ Faible similarit√© ({similarity:.2f}) ‚Üí G√©n√©ration Groq")
        
        # Pr√©parer le contexte (top 2-3 r√©sultats)
        context_parts = []
        for i, result in enumerate(faiss_results[:3], 1):
            # Limiter chaque r√©ponse
            answer_truncated = result['answer']
            if len(answer_truncated) > 250:
                answer_truncated = answer_truncated[:247] + "..."
            context_parts.append(f"{i}. Q: {result['question']}\n   R: {answer_truncated}")
        
        context = "\n\n".join(context_parts)
        
        # G√©n√©rer avec Groq
        generated_answer = generate_with_groq(query.question, context)
        
        print(f"üì§ R√©ponse g√©n√©r√©e ({len(generated_answer)} caract√®res)")
        return {
            "answer": generated_answer,
            "status": "success",
            "method": "groq_generated",
            "score": float(similarity),
            "context_used": len(faiss_results[:3])
        }

print("\n" + "="*50)
print("‚úì ANONTCHIGAN pr√™t (RAG Hybride + Groq)")
print("  - Recherche: FAISS + Mots-cl√©s")
print(f"  - G√©n√©ration: {'Groq ‚ö° (Ultra-rapide)' if USE_GROQ else 'Contexte direct ‚ö†Ô∏è'}")
print(f"  - Seuil similarit√©: 0.65")
if not USE_GROQ:
    print("\n‚ö†Ô∏è  Pour activer la g√©n√©ration Groq :")
    print("   1. Cr√©ez un compte sur https://console.groq.com")
    print("   2. Obtenez votre API key (gratuit)")
    print("   3. D√©finissez : export GROQ_API_KEY='votre_cl√©'")
    print("   4. Installez : pip install groq")
print("="*50 + "\n")

if __name__ == "__main__":
    print("üí´ D√©marrage du serveur...")
    print("üåê Interface: http://localhost:8000\n")
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)